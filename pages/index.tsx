/*
 * @Author: tohsaka888
 * @Date: 2022-08-01 11:31:01
 * @LastEditors: tohsaka888
 * @LastEditTime: 2022-09-05 08:47:23
 * @Description: 请填写简介
 */
import { Layout } from 'antd'
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import React, { Suspense, useCallback, useEffect, useReducer, useState } from 'react'
import { Graph } from '..'
import Canvas from '../components/KnowledgeMap/index'
import { baseUrl } from '../config/baseUrl'
import useScreenSize from '../hooks/useScreenSize'
import { nodeRadius, basicDistence, arcAreaLength, arcAreaDistence, mode } from '../components/KnowledgeMap/defaultConfig'
import { ConfigContext } from '../context'
import { VisibleContext } from '../components/context'
import ControllerPannel from '../components/ControllerPannel'
import main from '../mock/main.json'
import RightMenu from '../components/RightMenu'

const initState: Graph.ConfigProps = {
  nodeRadius,
  basicDistence,
  arcAreaDistence,
  arcAreaLength,
  mode: 1,
  showDisctription: true,
  isStraight: true,
  besselRate: 5,
  lineWidth: 10,
  arrowPosition: 50,
  nameVisible: true,
  nameSize: 12,
  relationSize: 12,
  pageSize: 5
}

const reducer = (state: typeof initState, action: Graph.ActionType) => {
  switch (action.type) {
    case 'setMode':
      return { ...state, mode: action.payload }
    case 'setAreaLength':
      return { ...state, arcAreaLength: action.payload }
    case 'setAreaDistence':
      return { ...state, arcAreaDistence: action.payload }
    case 'setNodeRadius':
      return { ...state, nodeRadius: action.payload }
    case 'setBasicDistence':
      return { ...state, basicDistence: action.payload }
    case 'setShowDiscription':
      return { ...state, showDisctription: action.payload }
    case 'setIsStraight':
      return { ...state, isStraight: action.payload }
    case 'setBesselRate':
      return { ...state, besselRate: action.payload }
    case 'setLineWidth':
      return { ...state, lineWidth: action.payload }
    case 'setArrowPosition':
      return { ...state, arrowPosition: action.payload }
    case 'reset':
      return { ...state }
    case 'setNameVisible':
      return { ...state, nameVisible: action.payload }
    case 'setNameSize':
      return { ...state, nameSize: action.payload }
    case 'setRelationSize':
      return { ...state, relationSize: action.payload }
    case 'setPageSize':
      return { ...state, pageSize: action.payload }
  }
}

const ContentContainer = ({ children }: { children: React.ReactNode }) => {
  const { height } = useScreenSize()
  return <Layout.Content style={{ height: height - 70, background: 'rgb(18, 51, 75)' }}>
    {children}
  </Layout.Content>
}

const Home: NextPage = () => {
  const [config, dispatch] = useReducer(reducer, initState)
  const [visible, setVisible] = useState<boolean>(false)
  const [graphData, setGraphData] = useState<{ nodes: Graph.Node[]; edges: Graph.Edge[]; }>({ nodes: [], edges: [] })
  const [insideGraph, setInsideGraph] = useState<{ vertices: Graph.Vertice[]; edges: Graph.Line[]; }>({ vertices: [], edges: [] })
  const [outsideGraph, setOutsideGraph] = useState<{ vertices: Graph.Vertice[]; edges: Graph.Line[]; }>({ vertices: [], edges: [] })
  const [loading, setLoading] = useState<boolean>(true)

  const getData = useCallback(async () => {
    const inRes = await fetch(`${baseUrl}/api/getNextVerticesWithEdge?id=${main.id}&direction=in`)
    const inData: Api.KnowledgeResponse = await inRes.json()
    setInsideGraph(inData.data)

    const outRes = await fetch(`${baseUrl}/api/getNextVerticesWithEdge?id=${main.id}&direction=out`)
    const outData: Api.KnowledgeResponse = await outRes.json()
    setOutsideGraph(outData.data)

    setLoading(false)
  }, [])

  useEffect(() => {
    getData()
  }, [getData])

  return (
    <>
      <Head>
        <title>知识图谱</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <main>
        <Layout>
          <Layout.Header style={{ background: '#14335e' }}>
            <h1 style={{ color: '#fff' }}>知识图谱Demo</h1>
          </Layout.Header>
          <Layout>
            <ConfigContext.Provider value={{ config, dispatch }}>
              <ControllerPannel />
              <ContentContainer>
                <VisibleContext.Provider value={{ visible, setVisible }}>
                  {!loading && <Canvas
                    insideVertices={insideGraph.vertices}
                    mainVertice={main}
                    outsideVertices={outsideGraph.vertices}
                    nodes={graphData.nodes}
                    edges={[...insideGraph.edges, ...outsideGraph.edges]}
                    config={config}
                  />}
                </VisibleContext.Provider>
              </ContentContainer>
            </ConfigContext.Provider>
          </Layout>
        </Layout>
      </main>
      <RightMenu />
    </>
  )
}

// export const getServerSideProps: GetServerSideProps = async () => {
//   const res = await fetch(`${baseUrl}/api/graph`)
//   const data: Api.GraphResponse = await res.json()
//   return {
//     props: {
//       data: data.data
//     },
//   }
// }

export default Home
